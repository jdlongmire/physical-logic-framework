CONSULTATION REQUEST: Prove kl_relation_to_entropy in Lean 4

CONTEXT:
We're systematically reducing axioms in our Lean 4 codebase. We have a theorem kl_relation_to_entropy that relates KL divergence to Shannon entropy, with a clear proof sketch in the comments, but we need help formalizing it in Lean 4.

DEFINITIONS:
```lean
structure ProbDist (α : Type*) [Fintype α] where
  prob : α → ℝ
  prob_nonneg : ∀ x, 0 ≤ prob x
  prob_sum_one : (Finset.univ : Finset α).sum prob = 1

noncomputable def UniformDist [Nonempty α] : ProbDist α where
  prob := fun _ => 1 / (Fintype.card α : ℝ)
  prob_nonneg := [proven]
  prob_sum_one := [proven]

noncomputable def ShannonEntropy (P : ProbDist α) : ℝ :=
  -(Finset.univ : Finset α).sum fun x =>
    if P.prob x = 0 then 0
    else P.prob x * Real.log (P.prob x) / Real.log 2

noncomputable def KLDivergence (P Q : ProbDist α) : ℝ :=
  (Finset.univ : Finset α).sum fun x =>
    if P.prob x = 0 then 0
    else if Q.prob x = 0 then 0
    else P.prob x * Real.log (P.prob x / Q.prob x) / Real.log 2
```

THEOREM TO PROVE:
```lean
theorem kl_relation_to_entropy [Nonempty α] (P : ProbDist α) :
  KLDivergence P (UniformDist : ProbDist α) =
    Real.log (Fintype.card α : ℝ) / Real.log 2 - ShannonEntropy P
```

PROOF SKETCH (from Cover & Thomas):
- D_KL[P||U] = ∑ P(x) log₂(P(x)/U(x))
- = ∑ P(x) log₂(P(x) · n)  [since U(x) = 1/n]
- = ∑ P(x) (log₂ P(x) + log₂ n)
- = ∑ P(x) log₂ P(x) + log₂(n)  [since ∑ P(x) = 1]
- = -H[P] + log₂(n)  [since H[P] = -∑ P(x) log₂ P(x)]

MY FAILED ATTEMPT:
I tried to unfold definitions and manipulate algebraically, but got stuck with:
- Unknown constant `Finset.sum_div` (doesn't exist in Mathlib)
- Complex nested if-then-else expressions
- Need to handle the ∑ P(x) log n = log n term (using prob_sum_one)

QUESTIONS:
1. What's the correct Lean 4 approach to prove this algebraic identity?
2. How do I handle the if-then-else expressions in the sums?
3. How do I factor out constants from Finset sums correctly?
4. Is there a Mathlib lemma about Real.log properties that would help?
5. Should I prove intermediate lemmas first?

GOAL:
Convert this from axiom to theorem with a complete Lean 4 proof.

CONSTRAINTS:
- Must use Lean 4 (v4.23.0-rc2)
- Must use Mathlib (current version in project)
- Proof should be reasonably readable/maintainable
- Can use standard Real.log properties from Mathlib

PRIORITY: High - this is blocking our axiom reduction efforts for peer review.
